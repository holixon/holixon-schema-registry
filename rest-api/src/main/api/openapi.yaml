openapi: 3.0.3

info:
  title: Holixon Avro Schema Registry API
  version: 1.0.0
  description: API of of schema registry.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Holisticon AG
    url: https://www.holisticon.de
    email: info@holisticon.de

tags:
  - name: Schema
    description: Operations to register and retrieve schema.

servers:
  - url: "http://localhost:8080/public/api"
    description: Local development server

paths:
  '/schema':
    post:
      tags:
        - Schema
      operationId: registerSchema
      description: Registers a new schema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvroSchema'
      responses:
        200:
          description: Schema registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvroSchemaWithId'

        400:
          description: Schema registration failed.
    get:
      tags:
        - Schema
      operationId: findAll
      description: Retrieves all schemas available in the registry.
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvroSchemaWithId'

  '/schema/id/{id}':
    get:
      tags:
        - Schema
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Schema id.
      operationId: findById
      description: Retrieves a schema by id.
      responses:
        200:
          description: Successfuly response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvroSchemaWithId'
        404:
          description: No schema matching specified paramters found.

  '/schema/info/{namespace}/{name}':
    get:
      tags:
        - Schema
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
          description: Namespace of the schema.
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: Name of the schema.
        - in: query
          name: revision
          required: false
          schema:
            type: string
          description: Revision of the schema.

      operationId: findByInfo
      description: Retrieves a schema by info.
      responses:
        200:
          description: Successfuly response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvroSchemaWithId'
        404:
          description: No schema matching specified paramters found.

  '/schema/search/{namespace}/{name}':
    get:
      tags:
        - Schema
      parameters:
        - in: path
          name: namespace
          required: true
          schema:
            type: string
          description: Namespace of the schema.
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: Name of the schema.

      operationId: findAllByCanonicalName
      description: Retrieves all schema by canonical name.
      responses:
        200:
          description: Successfuly response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvroSchemaWithId'

components:
  schemas:
    AvroSchema:
      type: object
      description: Avro Schema with schema id.

    AvroSchemaWithId:
      type: object
      description: Avro Schema with schema id.
      properties:
        namespace:
          type: string
          description: Namespace of the schema.
        name:
          type: string
          description: Schema name.
        schemaId:
          type: string
          description: Schema id.
        revision:
          type: string
          description: Revision.
        content:
          type: string
          description: Schema document.
      required:
        - namespace
        - name
        - schemaId
        - content
